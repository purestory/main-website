import { useEffect, useState } from 'react'
import Taskbar from './Taskbar'
import StartMenu from './StartMenu'
import DesktopIcons from './DesktopIcons'
import WindowManager from '../windows/WindowManager'
import ContextMenu from './ContextMenu'
import calculatorIcon from '../../assets/images/calculator-icon.png'
import explorerIcon from '../../assets/images/explorer_ICO_MYCOMPUTER.ico'
import chromeLogo from '../../assets/images/chrome-logo.svg'
import youtubeLogo from '../../assets/images/youtube-logo.svg'
import type { WindowState, DesktopIcon } from '../../types'

interface DesktopProps {
  windows: WindowState[]
  setWindows: React.Dispatch<React.SetStateAction<WindowState[]>>
}

const Desktop: React.FC<DesktopProps> = ({ windows, setWindows }) => {
  const [time, setTime] = useState(new Date())
  const [isStartMenuVisible, setIsStartMenuVisible] = useState(false)
  const [contextMenu, setContextMenu] = useState<{
    isVisible: boolean
    position: { x: number; y: number }
  }>({
    isVisible: false,
    position: { x: 0, y: 0 }
  })

  // Îç∞Ïä§ÌÅ¨ÌÜ± ÏïÑÏù¥ÏΩò Îç∞Ïù¥ÌÑ∞ Ï†ïÏùò
  const desktopIcons: DesktopIcon[] = [
    {
      id: 'icon-my-computer',
      label: 'ÎÇ¥ Ïª¥Ìì®ÌÑ∞',
      image: 'üñ•Ô∏è',
      windowId: 'my-computer-window'
    },
    {
      id: 'icon-projects',
      label: 'Projects',
      image: 'üìÅ',
      windowId: 'projects-window'
    },
    {
      id: 'icon-minesweeper',
      label: 'ÏßÄÎ¢∞Ï∞æÍ∏∞',
      image: 'üí£',
      windowId: 'minesweeper-app-window'
    },
    {
      id: 'icon-paint',
      label: 'Paint',
      image: 'üé®',
      windowId: 'paint-app-window'
    },
    {
      id: 'icon-calculator',
      label: 'Í≥ÑÏÇ∞Í∏∞',
      image: calculatorIcon,
      windowId: 'calculator-app-window'
    },
    {
      id: 'icon-explorer',
      label: 'ÌååÏùº ÌÉêÏÉâÍ∏∞',
      image: explorerIcon,
      windowId: 'explorer-app-window'
    },
    {
      id: 'icon-chrome',
      label: 'Chrome',
      image: chromeLogo,
      windowId: 'chrome-app-window'
    },
    {
      id: 'icon-youtube',
      label: 'YouTube',
      image: youtubeLogo,
      windowId: 'youtube-app-window'
    }
  ]

  const handleOpenProject = (projectName: string, windowId: string) => {
    openWindow(windowId, projectName)
  }

  const openWindow = (windowId: string, title: string) => {
    console.log('Opening window:', windowId, title)
    
    // Ïú†ÌäúÎ∏åÎäî ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
    if (windowId === 'youtube-app-window') {
      window.open('https://youtube.com', '_blank')
      return
    }
    

    
    // Ïù¥ÎØ∏ Ïó¥Î¶∞ Ï∞ΩÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    const existingWindow = windows.find(w => w.id === windowId)
    if (existingWindow) {
      // Ïù¥ÎØ∏ Ïó¥Î¶∞ Ï∞ΩÏù¥ ÏûàÏúºÎ©¥ Ìè¨Ïª§Ïä§Îßå Ï£ºÍ≥† ÏµúÏÜåÌôî Ìï¥Ï†ú
      setWindows(prev => prev.map(w => 
        w.id === windowId 
          ? { ...w, isMinimized: false, zIndex: Math.max(...prev.map(pw => pw.zIndex)) + 1 }
          : w
      ))
      return
    }

    // Ï∞ΩÎ≥Ñ Í∏∞Î≥∏ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
    let defaultSize = { width: 800, height: 600 }
    
    if (windowId === 'calculator-app-window') {
      defaultSize = { width: 280, height: 400 }
    } else if (windowId === 'minesweeper-app-window') {
      // ÏßÄÎ¢∞Ï∞æÍ∏∞Îäî Ï¥àÍ∏â ÎÇúÏù¥ÎèÑ Í∏∞Î≥∏ ÌÅ¨Í∏∞Î°ú ÏãúÏûëÌïòÎêò, onResizeÎ°ú ÎèôÏ†Å Î≥ÄÍ≤Ω Í∞ÄÎä•
      defaultSize = { width: 295, height: 372 } // Ï¥àÍ∏â ÎÇúÏù¥ÎèÑ Í∏∞Î≥∏ ÌÅ¨Í∏∞
    } else if (windowId === 'projects-window') {
      defaultSize = { width: 400, height: 350 }
    } else if (windowId === 'my-computer-window') {
      defaultSize = { width: 500, height: 400 }
    } else if (windowId === 'explorer-app-window') {
      defaultSize = { width: 1000, height: 800 }
    } else if (windowId === 'paint-app-window') {
      defaultSize = { width: 700, height: 550 }
    } else if (windowId === 'chrome-app-window') {
      defaultSize = { width: 1200, height: 800 }
    } else if (windowId === 'documents-window') {
      defaultSize = { width: 600, height: 500 }
    } else if (windowId === 'settings-window') {
      defaultSize = { width: 800, height: 600 }
    } else if (windowId === 'search-window') {
      defaultSize = { width: 700, height: 550 }
    } else if (windowId === 'run-window') {
      defaultSize = { width: 600, height: 500 }
    } else if (windowId === 'shutdown-window') {
      defaultSize = { width: 500, height: 600 }
    } else if (windowId.includes('-window') && !['my-computer-window', 'projects-window', 'explorer-app-window', 'chrome-app-window', 'paint-app-window', 'calculator-app-window', 'minesweeper-app-window'].includes(windowId)) {
      // ÌîÑÎ°úÏ†ùÌä∏ Ïï± ÏúàÎèÑÏö∞Îì§Ïùò Í∏∞Î≥∏ ÌÅ¨Í∏∞
      defaultSize = { width: 1000, height: 700 }
    }

    // ÌôîÎ©¥ ÌÅ¨Í∏∞ Ï†ïÎ≥¥
    const screenWidth = window.innerWidth
    const screenHeight = window.innerHeight
    const taskbarHeight = 40 // ÌÉúÏä§ÌÅ¨Î∞î ÎÜíÏù¥
    const margin = 40 // Ï∞Ω Ï£ºÎ≥Ä Ïó¨Î∞±

    // Î∏åÎùºÏö∞Ï†Ä Ï∞ΩÏóê ÎßûÍ≤å ÌÅ¨Í∏∞ Ï°∞Ï†ï (ÏßÄÎ¢∞Ï∞æÍ∏∞, Í≥ÑÏÇ∞Í∏∞ Ï†úÏô∏)
    if (windowId !== 'minesweeper-app-window' && windowId !== 'calculator-app-window') {
      const maxWidth = screenWidth - margin
      const maxHeight = screenHeight - taskbarHeight - margin
      
      if (defaultSize.width > maxWidth) {
        defaultSize.width = maxWidth
      }
      if (defaultSize.height > maxHeight) {
        defaultSize.height = maxHeight
      }
    }
    
    const centerX = (screenWidth - defaultSize.width) / 2
    const centerY = (screenHeight - defaultSize.height - taskbarHeight) / 2
    
    // Ïó¨Îü¨ Ï∞ΩÏù¥ Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù ÏïΩÍ∞ÑÏî© Ïò§ÌîÑÏÖã
    const offset = windows.length * 25
    const finalX = Math.max(20, centerX + offset)
    const finalY = Math.max(20, centerY + offset)

    // ÏÉà ÏúàÎèÑÏö∞ ÏÉùÏÑ±
    const newWindow: WindowState = {
      id: windowId,
      title: title,
      isMinimized: false,
      isMaximized: false,
      position: { x: finalX, y: finalY },
      size: defaultSize,
      zIndex: Math.max(0, ...windows.map(w => w.zIndex)) + 1
    }

    console.log(`‚úÖ ÏÉà Ï∞Ω ÏÉùÏÑ±:`, newWindow)
    setWindows(prev => {
      const updated = [...prev, newWindow]
      console.log(`üìä ÌòÑÏû¨ Ï∞Ω Î™©Î°ù:`, updated.map(w => ({ id: w.id, title: w.title })))
      return updated
    })
  }

  const handleWindowMove = (windowId: string, newPosition: { x: number; y: number }) => {
    setWindows(prev =>
      prev.map(w =>
        w.id === windowId
          ? { ...w, position: newPosition }
          : w
      )
    )
  }

  const handleWindowResize = (windowId: string, newSize: { width: number; height: number }) => {
    console.log(`üîß Ï∞Ω ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω: ${windowId}`, newSize)
    setWindows(prev =>
      prev.map(w =>
        w.id === windowId
          ? { ...w, size: newSize }
          : w
      )
    )
  }

  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault()
    setContextMenu({
      isVisible: true,
      position: { x: e.clientX, y: e.clientY }
    })
    setIsStartMenuVisible(false)
  }

  const handleContextMenuClose = () => {
    setContextMenu(prev => ({ ...prev, isVisible: false }))
  }

  const handleContextMenuItemClick = (itemId: string) => {
    switch (itemId) {
      case 'refresh':
        window.location.reload()
        break
      case 'new-folder':
        // ÏÉà Ìè¥Îçî ÏÉùÏÑ± Î°úÏßÅ
        break
      case 'paste':
        // Î∂ôÏó¨ÎÑ£Í∏∞ Î°úÏßÅ
        break
      case 'properties':
        // ÏÜçÏÑ± Ï∞Ω Ïó¥Í∏∞
        break
      case 'personalize':
        // Í∞úÏù∏ ÏÑ§Ï†ï Ï∞Ω Ïó¥Í∏∞
        break
      default:
        break
    }
  }

  const contextMenuItems = [
    { id: 'refresh', label: 'ÏÉàÎ°ú Í≥†Ïπ®', icon: 'üîÑ' },
    { separator: true, id: 'sep1', label: '' },
    { id: 'new-folder', label: 'ÏÉàÎ°ú ÎßåÎì§Í∏∞', icon: 'üìÅ' },
    { separator: true, id: 'sep2', label: '' },
    { id: 'paste', label: 'Î∂ôÏó¨ÎÑ£Í∏∞', icon: 'üìã', disabled: true },
    { separator: true, id: 'sep3', label: '' },
    { id: 'personalize', label: 'Í∞úÏù∏ ÏÑ§Ï†ï', icon: 'üé®' },
    { id: 'properties', label: 'ÏÜçÏÑ±', icon: '‚öôÔ∏è' }
  ]

  useEffect(() => {
    console.log('üñ•Ô∏è Îç∞Ïä§ÌÅ¨ÌÜ± Î°úÎìúÎê®')
    
    const timer = setInterval(() => {
      setTime(new Date())
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  return (
    <div className="desktop visible" onContextMenu={handleContextMenu}>
      <Taskbar 
        time={time} 
        windows={windows} 
        onWindowClick={(windowId) => {
          setWindows(prev => prev.map(w => 
            w.id === windowId 
              ? { ...w, isMinimized: !w.isMinimized, zIndex: Math.max(...prev.map(pw => pw.zIndex)) + 1 }
              : w
          ))
        }}
        onStartClick={() => setIsStartMenuVisible(!isStartMenuVisible)}
      />
      
      {/* Desktop icons - DesktopIcons Ïª¥Ìè¨ÎÑåÌä∏ ÏÇ¨Ïö© */}
      <DesktopIcons 
        icons={desktopIcons}
        onIconClick={openWindow}
      />

              <StartMenu 
          isVisible={isStartMenuVisible} 
          onClose={() => setIsStartMenuVisible(false)}
          onOpenWindow={openWindow}
          onOpenProject={handleOpenProject}
        />

              <WindowManager 
          windows={windows} 
          setWindows={setWindows}
          onWindowMove={handleWindowMove}
          onWindowResize={handleWindowResize}
          onOpenProject={handleOpenProject}
        />

      <ContextMenu
        isVisible={contextMenu.isVisible}
        position={contextMenu.position}
        items={contextMenuItems}
        onClose={handleContextMenuClose}
        onItemClick={handleContextMenuItemClick}
      />
    </div>
  )
}

export default Desktop 